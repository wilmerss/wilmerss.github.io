{"version":3,"sources":["components/Header.js","components/Formulario.js","components/Error.js","components/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","href","titulo","Formulario","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","buscarClima","e","preventDefault","respuesta","ciudad","ciudadRef","current","value","pais","paisRef","datosConsulta","React","createRef","onSubmit","type","name","id","ref","htmlFor","defaultValue","Component","Error","mensaje","Clima","mostrarResultado","_this$props$resultado","resultado","weather","main","urlIcon","concat","icon","alt","temp","toFixed","src","temp_max","temp_min","App","consultarApi","_this$state$consulta","state","consulta","url","console","log","fetch","then","json","datos","setState","catch","error","prevProps","prevState","cod","components_Error","components_Clima","components_Header","components_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9d0f0657.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <div>\r\n      <nav>\r\n        <div className=\"nav-wrapper light-blue darken-2\">\r\n          <a href=\"/\" className=\"brand-logo\">{props.titulo}</a>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  titulo: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Formulario extends Component {\r\n\r\n  constructor(props) { \r\n    super(props);\r\n    // Crear los refs\r\n    this.ciudadRef = React.createRef();\r\n    this.paisRef = React.createRef();\r\n  }\r\n\r\n  buscarClima = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Leer los refs y crear el objeto\r\n    const respuesta = {\r\n      ciudad: this.ciudadRef.current.value,\r\n      pais: this.paisRef.current.value\r\n    }\r\n\r\n    // Enviar por props\r\n    this.props.datosConsulta(respuesta);\r\n    \r\n    // Opcional resetear el form\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"contenedor-form\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <form onSubmit={this.buscarClima}>\r\n              <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                <input type=\"text\" name=\"\" id=\"ciudad\" ref={this.ciudadRef} />\r\n                <label htmlFor=\"ciudad\">Ciudad:</label>\r\n              </div>\r\n              <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                <select ref={this.paisRef}>\r\n                  <option value=\"\" defaultValue>\r\n                    Elige un país\r\n                  </option>\r\n                  <option value=\"AR\">Argentina</option>\r\n                  <option value=\"CO\">Colombia</option>\r\n                  <option value=\"CR\">Costa Rica</option>\r\n                  <option value=\"ES\">España</option>\r\n                  <option value=\"US\">Estados Unidos</option>\r\n                  <option value=\"MX\">México</option>\r\n                  <option value=\"PE\">Perú</option>\r\n                </select>\r\n                <label htmlFor=\"pais\">País:</label>\r\n              </div>\r\n              <div className=\"input-field col s12 m8 l4 offset-2 buscador\">\r\n                <input type=\"submit\" className=\"waves-effect waves-light btn-large yellow accent-4\" value=\"Buscar ...\" />\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFormulario.propTypes = {\r\n  datosConsulta: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = (props) => {\r\n  return ( \r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col s12 m6 offset-3\">\r\n          <div className=\"card-panel red darken-4 error\">\r\n            {props.mensaje}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nError.propTypes = {\r\n  mensaje: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Error;","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Clima extends Component {\r\n  mostrarResultado = () => {\r\n    // Obtener los datos de la consulta\r\n    const { name, weather, main } = this.props.resultado;\r\n    if (!name || !weather || !main) return null;\r\n\r\n    const kelvin = 273.15;\r\n    const urlIcon = `http://openweathermap.org/img/w/${weather[0].icon}.png`;\r\n    const alt = `clima de ${name}`;\r\n\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\r\n          <div className=\"card-panle light-blue align-center\">\r\n            <span className=\"white-text\">\r\n              <h2>Resultado Clima de: { name }</h2>\r\n              <p className=\"temperatura\">\r\n                Actual: { (main.temp - kelvin).toFixed(2) } &deg;C\r\n                <img src={urlIcon} alt={alt}/>\r\n              </p>\r\n              <p>Max. { main.temp_max - kelvin } &deg;C</p>\r\n              <p>Min. { main.temp_min - kelvin } &deg;C</p>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ) \r\n  };\r\n  render() {\r\n    return <div className=\"container\">{ this.mostrarResultado() }</div>;\r\n  }\r\n}\r\n\r\nClima.propTypes = {\r\n  resultado: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Clima;\r\n","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport Formulario from './components/Formulario';\nimport Error from './components/Error';\nimport Clima from './components/Clima';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: false,\n      consulta: {},\n      resultado: {}\n    }\n  }\n\n  consultarApi = () => {\n    const { ciudad, pais } = this.state.consulta;\n    if(!ciudad || !pais) return null;\n\n    // Leer la url y agregar el API key\n    const appId = '39eb06625cfabd65a32d7bf594650875';\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\n\n    console.log(url);\n\n    // Query con fetch api\n    fetch(url)\n      .then(respuesta => {\n        return respuesta.json();\n      })\n      .then(datos => {\n        return this.setState({\n          resultado: datos\n        })\n      })\n      .catch(error => {\n        console.log(error);\n      })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if( prevState.consulta !== this.state.consulta ) {\n      this.consultarApi();\n    }\n  }\n\n  datosConsulta = respuesta => {\n    if(respuesta.ciudad === '' || respuesta.pais === '') {\n      this.setState({\n        error: true\n      })\n    } else {\n      this.setState({\n        consulta: respuesta,\n        error: false\n      })\n    }\n  }\n\n  render() {\n    let resultado;\n    const { error } = this.state, \n          { cod } = this.state.resultado;\n    \n    if(error) {\n      resultado = <Error mensaje=\"Ambos campos son obligatorios\" />\n    } else if( cod === '404' ) {\n      resultado = <Error mensaje=\"Ciudad No Encontrada\" />\n    } else {\n      resultado = <Clima resultado = {this.state.resultado} />\n    }\n\n    return (\n      <div className=\"App\">\n        <Header\n          titulo='Clima React'\n        />\n        <Formulario\n          datosConsulta={this.datosConsulta}\n        />\n        {resultado}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}